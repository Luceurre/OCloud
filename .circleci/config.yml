version: 2.1

parameters:
  enable_sentry:
    type: boolean
    default: false

orbs:
  aws-cli: circleci/aws-cli@2.0.0
  aws-ecr: circleci/aws-ecr@6.15
  aws-eb: circleci/aws-elastic-beanstalk@1.0.2
  skip: theodo/skip@0.0.4
  sentry:
    commands:
      install:
        parameters:
          enable_sentry:
            type: boolean
            default: true
        steps:
          - when:
              condition: << parameters.enable_sentry >>
              steps:
                - run:
                    name: Install Sentry
                    command: |
                      curl -sL https://sentry.io/get-cli/ | bash
                      sentry-cli --help

      parse_version:
        parameters:
          enable_sentry:
            type: boolean
            default: true
          version:
            type: string
            default: ''
          version_raw:
            type: string
            default: ''
        steps:
          - when:
              condition: << parameters.enable_sentry >>
              steps:
                - when:
                    condition: << parameters.version >>
                    steps:
                      - run:
                          command: export VERSION=${<< parameters.version >>}
                - when:
                    condition: << parameters.version_raw >>
                    steps:
                      - run:
                          command: export VERSION=<< parameters.version_raw >>

      start_build:
        parameters:
          enable_sentry:
            type: boolean
            default: true
          version:
            type: string
            default: ''
          version_raw:
            type: string
            default: ''
        steps:
          - when:
              condition: << parameters.enable_sentry >>
              steps:
                - parse_version:
                    version: << parameters.version >>
                    version_raw: << parameters.version_raw >>
                - run:
                    name: "Sentry: start build"
                    command: |
                      sentry-cli releases new $VERSION
                      sentry-cli releases set-commits $VERSION --auto

      finish_build:
        parameters:
          enable_sentry:
            type: boolean
            default: true
          version:
            type: string
            default: ''
          version_raw:
            type: string
            default: ''
        steps:
          - when:
              condition: << parameters.enable_sentry >>
              steps:
                - parse_version:
                    version: << parameters.version >>
                    version_raw: << parameters.version_raw >>
                - run:
                    name: "Sentry: finish build"
                    command: |
                      sentry-cli releases finalize $VERSION

      deploy:
        parameters:
          enable_sentry:
            type: boolean
            default: true
          version:
            type: string
            default: ''
          version_raw:
            type: string
            default: ''
          environment:
            type: string
        steps:
          - when:
              condition: << parameters.enable_sentry >>
              steps:
                - parse_version:
                    version: << parameters.version >>
                    version_raw: << parameters.version_raw >>
                - run:
                    name: "Sentry: deploy"
                    command: |
                      sentry-cli releases deploys $VERSION< new -e << parameters.environment >>

executors:
  defaults_typescript:
    docker:
      - image: circleci/node:12.13

commands:
  checkout_merge:
    parameters:
      base_branch:
        type: string
        default: origin/main
    steps:
      - checkout
      - run:
          name: "Check for conflicts and merge main branch"
          command: |
            export GIT_MERGE_AUTOEDIT=no
            git config user.email "circleci@circleci"
            git config user.name "CircleCI"
            git merge << parameters.base_branch >> --no-ff

  yarn-install:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/OCloud/<< parameters.workspace >>
      - restore_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - save_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
          paths:
            - << parameters.workspace >>/node_modules
      - persist_to_workspace:
          root: ~/OCloud/<< parameters.workspace >>
          paths:
            - node_modules
            - .env

  yarn-tests:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/OCloud/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Unit test with coverage
          command: yarn test:coverage
      - store_artifacts:
          path: << parameters.workspace >>/coverage
      - run:
          working_directory: << parameters.workspace >>
          name: Run Typescript checker
          command: yarn tsc

  yarn-linter:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/OCloud/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Run linter
          command: yarn lint
      - store_artifacts:
          path: << parameters.workspace >>/coverage

  yarn-audit:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      # yarn-audit is started with a cron.
      # As such we cannot get the frontend dependencies from the workspace like we do with the other jobs. We need to re-install them.
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - run:
          working_directory: << parameters.workspace >>
          name: Check dependencies
          command: yarn audit-dependencies
  check-authentication:
    description: |
      Verifies the Heroku API key has been added so we can authenticate.
    parameters:
      print-whoami:
        default: false
        description: Print the result of heroku auth:whoami.
        type: boolean
    steps:
      - run:
          command: |
            if [[ $HEROKU_API_KEY == "" ]]; then
              echo "No Heroku API key set, please set the HEROKU_API_KEY environment variable."
              echo "This can be found by running the `heroku auth:token` command locally."
              exit 1
            else
              echo "Heroku API key found."
            <<#parameters.print-whoami>>
              heroku auth:whoami
            <</parameters.print-whoami>>
            fi
          name: Verify HEROKU_API_KEY is set
    deploy-via-git:
      description: |
        Replace this text with a description for this command. # What will this command do? # Descriptions should be short, simple, and clear.
      parameters:
        api-key:
          default: HEROKU_API_KEY
          description: The name of the environment variable containing your Heroku API Key.
          type: env_var_name
        app-name:
          default: $HEROKU_APP_NAME
          description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
          type: string
        branch:
          default: $CIRCLE_BRANCH
          description: Deploy the given branch. The default value is your current branch.
          type: string
        force:
          default: false
          description: Whether or not to force the git push (i.e. `git push -f`). Defaults to false.
          type: boolean
        maintenance-mode:
          default: false
          description: Use this to automatically enable maintenance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
          type: boolean
        no_output_timeout:
          default: 10m
          description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
          type: string
        tag:
          default: $CIRCLE_TAG
          description: Deploy the given tag. The default value is your current tag.
          type: string
      steps:
        - when:
            condition: << parameters.maintenance-mode >>
            steps:
              - run:
                  command: heroku maintenance:on --app << parameters.app-name >>
                  name: Turn ON maintenance mode.
        - run:
            command: |
              if << parameters.force >>;then
                force="-f"
              fi

              heroku_url="https://heroku:$<< parameters.api-key >>@git.heroku.com/<< parameters.app-name >>.git"

              if [ -n "<< parameters.branch >>" ]; then
                git push $force $heroku_url << parameters.branch >>:main
              elif [ -n "<< parameters.tag >>" ]; then
                git push $force $heroku_url << parameters.tag >>^{}:main
              else
                echo "No branch or tag found."
                exit 1
              fi
            name: Deploy branch or tag to Heroku via git push
            no_output_timeout: << parameters.no_output_timeout >>
        - when:
            condition: << parameters.maintenance-mode >>
            steps:
              - run:
                  command: heroku maintenance:off --app << parameters.app-name >>
                  name: Turn OFF maintenance mode.
    install:
      description: |
        Download and install the Heroku CLI. Will be skipped if the CLI is already installed in the system.
      steps:
        - run:
            command: |
              if [[ $(command -v heroku) == "" ]]; then
                curl https://cli-assets.heroku.com/install.sh | sh
              else
                echo "Heroku is already installed. No operation was performed."
              fi
            name: Install Heroku CLI (If not installed)
    push-docker-image:
      description: |
        Push a Docker image to the Heroku Docker registry.
      parameters:
        api-key:
          default: HEROKU_API_KEY
          description: The name of the environment variable containing your Heroku API Key.
          type: env_var_name
        app-name:
          default: $HEROKU_APP_NAME
          description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
          type: string
        no_output_timeout:
          default: 10m
          description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
          type: string
        process-types:
          default: ""
          description: Process types.
          type: string
        recursive:
          default: false
          description: Push all Dockerfiles in the directory to Heroku.
          type: boolean
      steps:
        - run:
            command: heroku container:login
            name: Login to Heroku Docker image registry
        - run:
            command: |
              heroku container:push -a <<parameters.app-name>> \
              <<# parameters.recursive >>--recursive<</ parameters.recursive >> \
              <<# parameters.process-types>><<parameters.process-types>><</ parameters.process-types>>
            name: Push Docker image to Heroku
            no_output_timeout: << parameters.no_output_timeout >>
    release-docker-image:
      description: |
        Release a Docker image from the Heroku Docker registry.
      parameters:
        api-key:
          default: HEROKU_API_KEY
          description: The name of the environment variable containing your Heroku API Key.
          type: env_var_name
        app-name:
          default: $HEROKU_APP_NAME
          description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
          type: string
        no_output_timeout:
          default: 10m
          description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
          type: string
        process-types:
          default: web
          description: Process types.
          type: string
      steps:
        - run:
            command: heroku container:login
            name: Login to Heroku Docker image registry
        - run:
            command: |
              heroku container:release -a <<parameters.app-name>> \
              <<parameters.process-types>>
            name: Release Docker image to Heroku
            no_output_timeout: << parameters.no_output_timeout >>
jobs:
  backend:
    working_directory: ~/OCloud

    docker:
      - image: python:3.9
      - image: postgres:10
        environment:
          POSTGRES_PASSWORD: postgres

    environment:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      DJANGO_SETTINGS_MODULE: OCloud.settings.dev

    steps:
      - checkout_merge

      - skip/skip_unchanged:
          paths: backend
          git_base_branch: origin/main

      - restore_cache:
          keys:
            - backend-{{ .Branch }}-{{ checksum "backend/poetry.lock" }}
            - backend-{{ .Branch }}
            - backend-main-{{ checksum "backend/poetry.lock" }}
            - backend-main

      - run:
          name: Install poetry
          command: |
            pip install poetry
            poetry config virtualenvs.create false

      - run:
          name: Check pyproject.toml
          working_directory: backend
          command: poetry check

      - run:
          name: Install python dependencies
          working_directory: backend
          command: poetry install

      - run:
          name: Check for vulnerable dependencies
          working_directory: backend
          command: |
            poetry export -f requirements.txt > requirements.txt
            cat requirements.txt | safety check --full-report \
            --ignore 38678 # django-celery-results

      - run:
          name: Check format
          working_directory: backend
          command: black --diff --check .

      - run:
          name: Check code style
          working_directory: backend
          command: flake8 .

      - run:
          name: Check imports order
          working_directory: backend
          command: isort --check-only --recursive --diff .

      - run:
          name: Check for security issues
          working_directory: backend
          command: bandit -r . -x ./.venv/

      - run:
          name: Check Django install
          working_directory: backend
          command: ./manage.py check

      - run:
          name: Check for non backward compatible migrations
          working_directory: backend
          command: |
            #!/usr/bin/env bash
            set -o pipefail
            # Compares the diff for migrations created in the current branch to master for forbidden migrations
            # Dumps the migrations file paths to a file to be fed to the migration linter
            # TODO debt this feature exists natively in `lintmigrations` but could not get it to work
            # because of a git option they use
            (git diff --name-only --diff-filter=ACMRT origin/master | grep -e  "./*/migrations/.*" || true) > changed_migrations.txt
            # Checks for forbidden migrations and exits with error if they exist
            python manage.py lintmigrations --include-migrations-from=changed_migrations.txt
            rm changed_migrations.txt

      - run:
          name: Check necessary migrations have been created
          working_directory: backend
          command: ./manage.py makemigrations --check --dry-run

      - run:
          name: Migrate database
          working_directory: backend
          command: ./manage.py migrate

      - run:
          name: Collect static files
          working_directory: backend
          command: ./manage.py collectstatic

      - run:
          name: Run tests
          working_directory: backend
          command: coverage run manage.py test

      - run:
          name: Check coverage
          working_directory: backend
          command: coverage report

      - save_cache:
          key: backend-{{ .Branch }}-{{ checksum "backend/poetry.lock" }}
          paths:
            - ~/.cache/pip

  yarn-install-front:
    executor: defaults_typescript
    working_directory: ~/OCloud
    steps:
      - yarn-install:
          workspace: frontend

  react-tests:
    executor: defaults_typescript
    working_directory: ~/OCloud
    environment:
      NODE_ENV: test
    steps:
      - yarn-tests:
          workspace: frontend

  react-bundlesize:
    executor: defaults_typescript
    working_directory: ~/OCloud
    environment:
      NODE_ENV: prod
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: frontend
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/OCloud/frontend
      - run:
          working_directory: frontend
          name: Check bundle size
          command: yarn build && ./node_modules/.bin/bundlesize
      - store_artifacts:
          path: frontend/coverage

  react-linter:
    executor: defaults_typescript
    working_directory: ~/OCloud
    environment:
      NODE_ENV: prod
    steps:
      - checkout_merge
      - skip/skip_unchanged:
          paths: frontend
          git_base_branch: origin/main
      - yarn-linter:
          workspace: frontend
      - run:
          working_directory: frontend
          name: Run css linter
          command: yarn lint-style
      - store_artifacts:
          path: frontend/coverage

  react-audit:
    executor: defaults_typescript
    working_directory: ~/OCloud
    environment:
      NODE_ENV: prod
    steps:
      - yarn-audit:
          workspace: frontend

  deploy-via-git:
    description: |
      Quickly and easily take the changes to this branch or tag and deploy them to Heroku automatically with this job.
    executor: default
    parameters:
      api-key:
        default: HEROKU_API_KEY
        description: The name of the environment variable containing your Heroku API Key.
        type: env_var_name
      app-name:
        default: $HEROKU_APP_NAME
        description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
        type: string
      branch:
        default: $CIRCLE_BRANCH
        description: Deploy the given branch. The default value is your current branch.
        type: string
      force:
        default: false
        description: Whether or not to force the git push (i.e. `git push -f`). Defaults to false.
        type: boolean
      maintenance-mode:
        default: false
        description: Use this to automatically enable mantainance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
        type: boolean
      no_output_timeout:
        default: 10m
        description: Allows you to specify the no_output_timeout for the `git push` to heroku. Defaults to 10m.
        type: string
      post-deploy:
        default: [ ]
        description: A list of post-deploy steps that are run after deployment. This would be an ideal place to scale any processes back up.
        type: steps
      pre-deploy:
        default: [ ]
        description: A list of pre-deploy steps that are run before deployment. This would be an ideal place to scale any processes down.
        type: steps
      tag:
        default: $CIRCLE_TAG
        description: Deploy the given tag. The default value is your current tag.
        type: string
    steps:
      - install
      - check-authentication
      - checkout
      - steps: << parameters.pre-deploy >>
      - deploy-via-git:
          api-key: << parameters.api-key >>
          app-name: << parameters.app-name >>
          branch: << parameters.branch >>
          force: << parameters.force >>
          maintenance-mode: << parameters.maintenance-mode >>
          no_output_timeout: << parameters.no_output_timeout >>
          tag: << parameters.tag >>
      - steps: << parameters.post-deploy >>
    push-docker-image:
      description: |
        Quickly and easily take the changes to this branch and deploy them to Heroku automatically with this job.
      executor: default
      parameters:
        app-name:
          default: $HEROKU_APP_NAME
          description: The name of your Heroku App. For backwards compatibility the literal value `$HEROKU_APP_NAME` is the default, so you can easily use this command by setting an environment variable called HEROKU_APP_NAME
          type: string
        maintenance-mode:
          default: false
          description: Use this to automatically enable mantainance mode before pre-deploy steps and have it disabled after post-deploy steps have been run.
          type: boolean
        post-deploy:
          default: [ ]
          description: A list of post-deploy steps that are run after deployment. This would be an ideal place to scale any processes back up.
          type: steps
        pre-deploy:
          default: [ ]
          description: A list of pre-deploy steps that are run before deployment. This would be an ideal place to scale any processes down.
          type: steps
      steps:
        - install
        - check-authentication
        - checkout
        - steps: << parameters.pre-deploy >>
        - push-docker-image:
            app-name: << parameters.app-name >>
            process-types: web
        - release-docker-image:
            app-name: << parameters.app-name >>
            process-types: web
        - steps: << parameters.post-deploy >>
workflows:
  version: 2
  stack:
    jobs:
      - backend
      - yarn-install-front
      - react-tests:
          requires:
            - yarn-install-front
      - react-bundlesize:
          requires:
            - yarn-install-front
      - react-linter:
          requires:
            - yarn-install-front
      - hold:
          type: approval
          requires:
            - backend
            - react-bundlesize
            - react-linter
      - deploy:
          requires:
            - hold
  audit-dependencies:
    triggers:
      - schedule:
          # jobs start at 00h00 every Monday, test made for main
          cron: "0 0 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - react-audit